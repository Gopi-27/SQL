-- TRIGGERS
-- A TRIGGER IS A STORED PL/SQL BLOCK THAT IS AUTOMATICALLY EXECUTED(FIRED)
-- WHEN A SPECIFIED EVENT OCCURS ON A TABLE OR VIEW

-- SYNTAX:
CREATE OR REPLACE TRIGGER trigger_name
BEFORE | AFTER | INSTEAD OF
INSERT | UPDATE | DELETE
ON table_name
[FOR EACH ROW]
BEGIN
   -- Trigger logic here
END;
/

-- TYPES OF TRIGGERS:
-- BEFORE TRIGGER:
--> EXECUTES BEFORE THE TRIGGERING EVENT(USEFUL FOR VALIDATION)
-- AFTER TRIGGER:
--> EXECUTES AFTER THE TRIGGERING EVENT(USEFUL FOR LOGGING OR AUDITING)
-- INSTEAD OF TRIGGER:
--> USED ON VIEWS TO PERFORM CUSTOM DML OPERATIONS

-- 1. AFTER TRIGGER:

-- EX: KEEP TRACK OF ANY SALARY CHANGES MADE TO EMPLOYEES BY STORING 
-- THE OLD AND NEW VALUES IN AM emp_audit TABLE

-- THIS TRIGGER WILL AUTOMATICALLY FIRED AFTER UPADATE MADE ON SALARY COLUMN OF TEH EMPLOYEE TABLE
CREATE OR REPLACE TRIGGER trg_salary_audit
AFTER UPDATE OF salary ON employee
FOR EACH ROW
BEGIN
   INSERT INTO emp_audit(id, old_salary, new_salary, changed_on)
   VALUES(:OLD.id, :OLD.salary, :NEW.salary, SYSDATE);
END;
/

UPDATE employee SET salary = salary + 2000 WHERE id = 101;

-- 2. BEFORE TRIGGER:

-- EX: PREVENT INSERTING AN EMPLOYEE WITH SALARY LESS THAN AVERAGE SALARY OF THAT DEPARTMENT
-- THIS TRIGGER IS AUTOMATICALLY CALLED BEFORE INSERTING A RECORD INTO EMPLOYEE TABLE
CREATE OR REPLACE TRIGGER trg_check_salary
BEFORE INSERT ON employee
FOR EACH ROW
DECLARE
   avg_salary NUMBER;
BEGIN
   SELECT AVG(salary) INTO avg_salary FROM employee WHERE department = :NEW.department;

   IF :NEW.salary < avg_salary THEN
      RAISE_APPLICATION_ERROR(-20001, 'Salary must be at least AVG SALARY OF THE DEPARTMENT');
   END IF;
END;
/

INSERT INTO employee(id,name,age,gender,department,salary,date_of_joining,email)
VALUES (201,'Alice',30,'Female','SW',1000,CURRENT_DATE,'alice@gmail.com'); -- FIALS ,1000 IS LESSTHAN AVG SALARY OF SW EMPLOYEES

-- INSTEAD OF TRIGGER:
-- ALLOW INSERTIONS ON A VIEW THAT COMBINES TWO TABLES

CREATE OR REPLACE VIEW emp_dept_view AS
SELECT e.emp_id, e.name, d.dept_name
FROM employees e JOIN departments d ON e.dept_id = d.dept_id; -- NON-UPDATABLE VIEW
-- THIS TRIGGER WILL CHANGE THE DIRECTION THE FROM VIEW TO BASE TABLE WHEN INSERT MADE OF VIEW
CREATE OR REPLACE TRIGGER trg_view_insert
INSTEAD OF INSERT ON emp_dept_view
FOR EACH ROW
BEGIN
   INSERT INTO employees(emp_id, name, dept_id) 
   VALUES(:NEW.emp_id, :NEW.name,(
                                    SELECT dept_id 
                                    FROM departments 
                                    WHERE dept_name = :NEW.dept_name));
END;
/
INSERT INTO emp_dept_view VALUES (201,'Alice','SW');

