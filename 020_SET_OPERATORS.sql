-- SET OPERATORS
-- 1. UNION
-- 2. UNION ALL
-- 3. INTERSECT
-- 4. MINUS

-- RULES:
-- WHEN USING -> UNION, UNION ALL, INTERSECT, MINUS
-- BOTH SELECT QUERIES MUST HAVE THE SAME NUMBER OF COLUMNS
-- AND EACH COLUMN'S DATA TYPE SHOULD BE COMPATIBLE(EX: NUMBER WITH NUMBER, TEXT WITH TEXT);

CREATE TABLE course_A(
    s_id NUMBER,          
    name VARCHAR2(20),        
    age NUMBER,
    city VARCHAR2(20)
);
INSERT INTO course_A VALUES (1,'Alice',19,'America'),(2,'Bob',20,'Bombay'),(3,'Chalie',20,'China');
SELECT * FROM course_A;

CREATE TABLE course_B(
    s_id NUMBER,          
    name VARCHAR2(20),        
    age NUMBER,
    city VARCHAR2(20)
);
INSERT INTO course_B VALUES (1,'Alice',19,'America'),(90,'Prank',20,'Pakistan'),(3,'Chalie',20,'China'),(91,'Ram',19,'Srilanka');
SELECT * FROM course_B;

-- 1. UNION
SELECT city FROM course_A
UNION 
SELECT city FROM course_B;
-- RETURNS ALL DISTINCT CITIES

SELECT s_id,name FROM course_A
UNION 
SELECT s_id,name FROM course_B;
-- RETURNS ALL DISTINCT STUDENTS

-- 2. UNION ALL
SELECT city FROM course_A
UNION ALL
SELECT city FROM course_B;
-- RETURNS ALL CITIES WITH DUPLICATES

SELECT s_id,name FROM course_A
UNION ALL
SELECT s_id,name FROM course_B;
-- RETURNS ALL STUDENTS WITH DUPLICATES

-- 3. INTERSECTION
SELECT city FROM course_A
INTERSECT
SELECT city FROM course_B;
-- RETURNS COMMON  CITIES

SELECT s_id,name FROM course_A
INTERSECT
SELECT s_id,name FROM course_B;
-- RETURNS COMMON STUDENT WHO ENROLLED INTO BOTH COURSES

-- 4. MINUS
SELECT city FROM course_B
INTERSECT
SELECT city FROM course_A;
-- RETURNS ONLY CITIES THAT ARE THERE IN ONLY COURSE_B BUT NOT COURSE_A

SELECT s_id,name FROM course_A
MINUS
SELECT s_id,name FROM course_B;
-- RETURNS THE STUDENTS WHO ENROLLED INTO ONLY COURSE_A BUT_NOT COURSE_B
